2A = SELECT euser.nickname, COUNT(use.address) as addr FROM euser \
Join use on euser.euid = use.euser \
Group by euser.nickname \
Having COUNT(use.address) > 4\
ORDER BY COUNT(use.address) DESC,euser.nickname DESC 

2B = SELECT tableoid::regclass::text AS user_type, COUNT(euid) \
FROM euser \
GROUP BY user_type \
union all \
SELECT 'total', COUNT(*) \
FROM euser \
ORDER BY count DESC
2C = SELECT SUBSTRING(filename, 1, 1) as first_letter, COUNT(id)  as frequency \
FROM attachment \
GROUP BY SUBSTRING(filename,1,1) \
ORDER BY first_letter DESC
2D = select p1.nickname,e1.address,p1.date_of_birth,e1.euser from person p1 \
inner join \
use e1 on p1.euid =e1.euser \
where e1.address in (select u.address from person p \
inner join use u \
on u.euser = p.euid \
where date_of_birth = \
(select max(date_of_birth ) from person)) \
order by p1.nickname asc
2E =  WITH \
        user_address AS (SELECT address, euser FROM use ),\
        email_recipients AS (SELECT * FROM addressee),\
        email_date AS (SELECT id, EXTRACT(MONTH FROM date) as email_month, \
        EXTRACT(DAY FROM date) as email_day, _FROM FROM email),\
        organisation AS (SELECT euid FROM organization) \n\
SELECT p1.nickname, EXTRACT(MONTH FROM p1.date_of_birth) as month_birth,\
EXTRACT(DAY FROM p1.date_of_birth) as day_birth, COUNT(DISTINCT email_date._FROM) \
FROM person p1 INNER JOIN user_address \
on p1.euid = user_address.euser \
INNER JOIN email_recipients \
on email_recipients._to = user_address.address \
INNER JOIN email_date \
on email_date.id = email_recipients.email and EXTRACT(MONTH FROM p1.date_of_birth) = \
email_date.email_month and EXTRACT(DAY FROM p1.date_of_birth) = email_date.email_day \
LEFT JOIN organisation \
ON organisation.euid = email_date._FROM \
WHERE organisation.euid IS NULL \
group by p1.nickname,month_birth,day_birth \
order by p1.nickname asc
2F = WITH cte as \
        (SELECT a1.adid,a1.username, \
        ROUND(AVG(abs(e1.date :: date - e2.date :: date)/7)) as avg_response_time \
        FROM address a1 \
        inner join \
        (SELECT * FROM email) e1 \
        on e1._FROM = a1.adid \
        inner join \
        (SELECT * FROM email) e2 \
        on e1.id = e2.in_reply_to \
        group by a1.adid,a1.username \
        having COUNT(a1.adid) >= 3) \n\
SELECT cte.*, \
(SELECT COUNT(DISTINCT avg_response_time) \
FROM cte cte2 \
where \
cte2.avg_response_time <= cte.avg_response_time \
) as dense_rank \
FROM cte \
group by cte.adid,cte.username,cte.avg_response_time \
order by cte.avg_response_time,cte.count \
limit 23
2G = WITH cte as \
        (SELECT a1.adid,a1.username, \
        ROUND(AVG(abs(e1.date :: date - e2.date :: date)/7)) as avg_response_time \
        FROM address a1 \
        inner join \
        (SELECT * FROM email) e1 \
        on e1._FROM = a1.adid \
        inner join \
        (SELECT * FROM email) e2 \
        on e1.id = e2.in_reply_to \
        group by a1.adid,a1.username \
        having COUNT(a1.adid) >= 3) \n\
SELECT cte.*, \
(SELECT 1 + COUNT(*) \
FROM cte cte2 \
where \
cte2.avg_response_time < cte.avg_response_time \
) as rank \
FROM cte \
group by cte.adid,cte.username,cte.avg_response_time \
order by cte.avg_response_time,cte.count \
limit 10
2H = WITH recursive thread AS \
( \
SELECT e.id, \
e.in_reply_to, \
e.id AS root_id, \
0    AS _depth, \
e.contained_in, \
e._from, \
e.date \
FROM   email e \
WHERE  e.in_reply_to IS NULL \
UNION ALL \
SELECT     e.id, \
e.in_reply_to, \
t.id       AS root_id, \
t._depth +    1, \
e.contained_in, \
e._from, \
e.date \
FROM  email e \
INNER JOIN thread t \
ON         e.in_reply_to = t.id ) \
SELECT    DISTINCT t.root_id AS thread_id, \
t.id      AS email_id, \
a1.username,\
t.in_reply_to , \
_depth AS depth, \
t.date AS date \
FROM       thread t \
INNER JOIN picture p1 \
ON         t.id = p1.contained_in \
INNER JOIN address a1 \
ON         t._from = a1.adid \
WHERE      t.in_reply_to IS NOT NULL \
AND        p1.width = p1.height \
ORDER BY   thread_id ASC

3A = CREATE OR REPLACE FUNCTION formataddress(addid INTEGER) RETURNS VARCHAR AS $emailid$ \
DECLARE \
    emailid VARCHAR ; \
BEGIN \
    SELECT concat(username,'@',domain) INTO emailid FROM address WHERE adid = addid; \
    RETURN emailid ; \
END; $emailid$ \
LANGUAGE PLPGSQL;

3B = CREATE OR REPLACE FUNCTION formatuser(userid INTEGER) RETURNS VARCHAR AS $user$ \
DECLARE \
    user VARCHAR ; \
BEGIN \
    IF userid IN (SELECT euid FROM person) THEN \
    SELECT concat(first_name,' ',surname,'(',nickname,')') INTO user FROM persON WHERE euid = userid ; \
    ELSIF userid IN (SELECT euid FROM organization) THEN \
    SELECT concat(firm,'(',nickname,')') INTO user FROM organizatiON WHERE euid = userid; \
    ELSE \
    SELECT nickname INTO user FROM euser WHERE euid = userid ; \
    END IF; \
RETURN user; \
END; $user$ \
LANGUAGE PLPGSQL;

3C = CREATE OR REPLACE FUNCTION addressbook (userid INTEGER) \
	RETURNS TABLE ( \
		username VARCHAR, \
		emailid VARCHAR \
)  \
AS $$ \
BEGIN \
	RETURN query WITH senderaddress AS (SELECT  \
							_from AS adr,a1.email \
							FROM email e  \
							INNER JOIN addressee a1  \
							ON e.id  = a1.email OR e.in_reply_to = a1.email  \
							INNER JOIN use u  \
							ON a1."_to" = u.address  \
							WHERE u.euser = userid), \
					recipientaddress AS (SELECT \
							_to as adr,a2.email \
							FROM addressee a2  \
							INNER JOIN email e2 \
							ON  e2.id = a2.email OR e2.in_reply_to = a2.email  \
							INNER JOIN use u2 \
							ON u2.address = e2."_from"  \
							WHERE u2.euser = userid), \
					sr as (SELECT * FROM senderaddress UNION SELECT * FROM recipientaddress), \
					totalsr as (SELECT adr FROM sr  \
								UNION \
								SELECT t.adr FROM sr t INNER JOIN email e ON e.contained_in = t.email),				 \
					users AS (SELECT \
							u.euser,a.adid  \
							FROM use u  \
							INNER JOIN address a \
							ON a.adid = u.address), \
					senderReciever AS (SELECT  \
							formatuser(euser), formataddress(adr) \
							FROM users us \
							INNER JOIN totalsr tsr \
							ON tsr.adr = us.adid), \
					selfuser AS (SELECT \
							formatuser(euser),formataddress(adid) \
							FROM users  \
							WHERE euser = userid) \
					 \
										 						 \
					SELECT * FROM senderReciever \
					UNION \
					SELECT * FROM selfuser; \
				 \
	 \
END; $$  \
LANGUAGE 'plpgsql';

4A = DROP FUNCTION IF EXISTS getattachments(varchar,date,date,varchar);

4B = CREATE OR REPLACE FUNCTION getAttachments(varchar,date,date,varchar) RETURNS TABLE( \
id integer, \
filename VARCHAR, \
subject varchar, \
_from integer, \
address integer, \
date timestamp \
) \
AS $$ \
BEGIN \
RETURN query WITH \
user_id AS (select * from euser \
inner join use on \
euser.euid = use.euser \
where nickname = $1), \
all_emails AS ( \
select e1.id,e1.filename,e1.subject,e1._from,u1.address,e1.date from user_id u1 \
inner join email e1 \
on u1.address = e1._from \
UNION ALL \
select e1.id,e1.filename,e1.subject,e1._from,u1.address,e1.date from user_id u1 \
inner join addressee a1 \
on u1.address = a1._to \
inner join email e1 on \
a1.email = e1.id \
), \
all_emails_attached AS ( \
select * from all_emails \
UNION ALL \
select e1.id,e1.filename,e1.subject,e1._from,all1.address,e1.date \
from all_emails all1 \
inner join email e1 \
on all1.id = e1.contained_in \
) \
SELECT * FROM all_emails_attached all1 \
WHERE to_tsvector(all1.filename) @@ to_tsquery($4) and (all1.date \
BETWEEN $2 AND $3) \
UNION ALL \
SELECT * FROM all_emails_attached all2  \
WHERE to_tsvector(all2.subject) @@ to_tsquery($4) and (all2.date \
BETWEEN $2 AND $3); \
END; $$ \
LANGUAGE 'plpgsql';
S2_1A = SELECT * FROM account_v  WHERE stock = ?

S2_1B = SELECT * FROM orders_v  WHERE stock = ?

S4_4A = select count(*) as no_rides, borough, zone \
from trip_records_green g \
inner join taxi_zones t \
on t.location_id = g.pu_location_id \
group by \
GROUPING SETS ( \
(borough, zone), \
(borough) \
 ) \
order by no_rides desc

S4_4B = select count(*) as no_rides, borough, zone \
from trip_records_green g \
inner join taxi_zones t \
on t.location_id = g.do_location_id \
group by \
GROUPING SETS ( \
(borough, zone), \
(borough) \
) \
order by no_rides desc 

S4_4C = select popular_payment, payment_method, RANK() OVER(ORDER BY popular_payment desc) \
from ( \
select count(*) as popular_payment, p.payment_method \
from trip_records_green g \
inner join payment_methods p \
on p.id = g.payment_type \
group by p.payment_method \
order by popular_payment desc \
) q

S4_4D = select CAST(AVG(total_amount) AS DECIMAL(10,2)) as average_trip_ammount, borough, zone \
from trip_records_green g \
inner join taxi_zones t \
on t.location_id = g.do_location_id \
group by \
GROUPING SETS ( \
(borough, zone), \
(borough) \
) \
order by average_trip_ammount desc

S4_4E = select borough, zone, RANK() OVER(ORDER BY congestion desc) \
from ( \
select SUM(congestion_surchage) as congestion, borough, zone \
from trip_records_green g \
inner join taxi_zones t \
on t.location_id = g.do_location_id \
group by \
GROUPING SETS ( \
(borough, zone), \
(borough) \
) \
) q

S4_4F = select to_char(lpep_pickup_datetime, 'Day') as day_of_the_week, count(*) as no_trips \
from trip_records_green g \
inner join taxi_zones t \
on t.location_id = g.pu_location_id \
group by \
day_of_the_week \
order by no_trips desc

S4_4G = select CAST(AVG(tip_amount) AS DECIMAL(10,2)) as tip_amount, borough, zone \
from trip_records_green g \
inner join taxi_zones t \
on t.location_id = g.do_location_id \
group by borough, zone \
order by tip_amount desc

S4_4H = select count(*) as no_rides,name \
from hvfhs_rides r \
inner join vfh_license v \
on r.hvfhs_license_num = v.id \
group by name \
order by no_rides desc

S4_4I = select CAST(AVG(tolls_amount) AS DECIMAL(10,2)) as average_toll_ammount, borough, zone \
from trip_records_green g \
inner join taxi_zones t \
on t.location_id = g.do_location_id \
group by \
GROUPING SETS ( \
(borough, zone), \
(borough) \
) \
order by average_toll_ammount desc

S4_4J = select count(*) as no_rides,name \
from hvfhs_rides r \
inner join vfh_license v \
on r.hvfhs_license_num = v.id \
where SR_Flag = 1 \
group by name \
order by no_rides desc

sim_result = SELECT distinct al.search_keyword FROM application_logs al \
WHERE SIMILARITY(al.search_keyword, ?) >= 0.3 \
AND al.username  <> ? \
AND al.search_type = ? \
AND al.search_keyword <> ?