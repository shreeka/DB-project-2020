logging.level.org.springframework.boot.autoconfigure=ERROR
hibernate.generate_statistics=true
4A = select m.id, m.title_type, m.title_name, m.original_title, m.adult_movie,\
r.release_year, r.end_year, g.genre, r.run_time \
from movie_titles m inner join release_information r \
on r.title_id = m.id \
inner join genre g on g.title_id = m.id \
where m.title_name = {0}
4A_1 = select m.id, m.title_type, m.title_name, m.original_title, m.adult_movie, \
r.release_year, r.end_year, g.genre, r.run_time \
from movie_titles m inner join release_information r \
"on r.title_id = m.id \
"inner join genre g on g.title_id = m.id \
"where m.id = {0}
4B = select a.movie_title, a.person_id, m.title_name, p.name from credits a inner join \
(select c.person_id, p.name, c.movie_title, r.average_rating \
from credits c \
inner join (select * from person where person.name = {0}) p \
on c.person_id = p.id \
inner join ratings r on \
c.movie_title = r.movie_title \
order by r.average_rating desc \
limit 10) c \
on a.movie_title = c.movie_title \
inner join movie_titles m \
on m.id = a.movie_title \
inner join person p \
on a.person_id = p.id
4C = select m.title_name, g.genre, g.average_rating, g.no_votes from movie_titles m \
inner join ( \
select * from genre g \
inner join ratings r \
on g.title_id = r.movie_title \
where g.genre = {0}) g \
on g.title_id = m.id \
order by no_votes desc \
limit 10
4D = select q.movie_title, m.title_type, m.title_name, q.plot_summary, q.plot_synopsis, q. \
from movie_titles m inner join \
(SELECT movie_title,plot_summary,plot_synopsis, ts_rank_cd(v, ts_q) as rank FROM movie_plots m, \
to_tsvector(m.plot_summary) v, \
to_tsquery({0}) ts_q \
WHERE to_tsvector(m.plot_summary) @@ to_tsquery({1})) q \
on m.id = q.movie_title \
order by rank desc
spring.session.store-type=redis
spring.redis.host=localhost
spring.redis.port=6379
#spring.cache.redis.time-to-live= 3600000